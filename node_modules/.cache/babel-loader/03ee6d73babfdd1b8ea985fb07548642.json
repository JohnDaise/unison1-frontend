{"ast":null,"code":"import _classCallCheck from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/src/components/GigDetail.js\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { fetchEvents, fetchPosts } from \"../redux/actions/index\";\nimport { Grid, Loader } from 'semantic-ui-react';\nimport \"../App.css\";\nimport GigPlayerList from './GigPlayerList';\nimport GigPostList from './GigPostList'; // import PostList from './PostList';\n\nimport moment from 'moment';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nvar GigDetail =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GigDetail, _React$Component);\n\n  function GigDetail() {\n    _classCallCheck(this, GigDetail);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GigDetail).apply(this, arguments));\n  }\n\n  _createClass(GigDetail, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchEvents();\n      this.props.fetchPosts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var weekday = {\n        0: \"Sunday\",\n        1: \"Monday\",\n        2: \"Tuesday\",\n        3: \"Wednesday\",\n        4: \"Thursday\",\n        5: \"Friday\",\n        6: \"Saturday\" // let gigs = this.props.users.find(user => user.id === this.props.currentUser.id).events\n\n      };\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, this.props.loading ? React.createElement(Loader, {\n        active: true,\n        inline: \"centered\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }) : React.createElement(Grid, {\n        columns: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"fixedleft\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        name: 'name',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.props.gig.name), React.createElement(\"h4\", {\n        name: 'date',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \" \", weekday[moment(this.props.gig.datetime).format('E')], \" \", moment(this.props.gig.datetime).format('MMMM DD YYYY')), React.createElement(\"h4\", {\n        name: 'time',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, moment(this.props.gig.datetime).format('h:mm a')), React.createElement(\"h4\", {\n        name: 'location',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, this.props.gig.location), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Notes:\"), React.createElement(\"p\", {\n        name: 'notes',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.props.gig.notes)), React.createElement(Grid.Column, {\n        className: \"post-col\",\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(GigPostList, {\n        currentUser: this.props.currentUser,\n        gig: this.props.gig,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"fixedright\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(GigPlayerList, {\n        currentUser: this.props.currentUser,\n        gig: this.props.gig,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return GigDetail;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, propsFromParent) {\n  // let player = state.users.find(user => user.id === propsFromParent.currentUser.id)\n  var gig = state.events.find(function (gig) {\n    return gig.id === parseInt(propsFromParent.gigId);\n  });\n  var event = state.events.find(function (event) {\n    return event.id === gig.id;\n  }); /// this array is a player's gigs console.log(player.events)\n\n  return {\n    loading: state.loading,\n    events: state.events,\n    posts: state.posts,\n    users: state.users,\n    gig: gig,\n    event: event\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchEvents: fetchEvents,\n  fetchPosts: fetchPosts\n})(withRouter(GigDetail)); ///need to make a different/parallel component to PostList called GigPostList so that gig details are rendered for players","map":{"version":3,"sources":["/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/src/components/GigDetail.js"],"names":["React","withRouter","connect","fetchEvents","fetchPosts","Grid","Loader","GigPlayerList","GigPostList","moment","GigDetail","props","weekday","loading","gig","name","datetime","format","location","notes","currentUser","Component","mapStateToProps","state","propsFromParent","events","find","id","parseInt","gigId","event","posts","users"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { fetchEvents, fetchPosts } from \"../redux/actions/index\";\n\nimport { Grid, Loader } from 'semantic-ui-react';\nimport \"../App.css\";\n\nimport GigPlayerList from './GigPlayerList';\nimport GigPostList from './GigPostList';\n// import PostList from './PostList';\n\nimport moment from 'moment';\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\n\n\n\nclass GigDetail extends React.Component {\n\ncomponentDidMount(){\n  this.props.fetchEvents();\n  this.props.fetchPosts();\n}\n\n\n  render() {\n\n    let weekday = {\n     0: \"Sunday\",\n     1: \"Monday\",\n     2: \"Tuesday\",\n     3: \"Wednesday\",\n     4: \"Thursday\",\n     5: \"Friday\",\n     6: \"Saturday\",\n  }\n\n\n    // let gigs = this.props.users.find(user => user.id === this.props.currentUser.id).events\n\n      return (\n        <React.Fragment>\n           {this.props.loading ?\n              <Loader active inline='centered' />\n             :\n        <Grid columns={1}>\n            <div className={\"fixedleft\"} >\n              <h3 name={'name'}>{this.props.gig.name}</h3>\n              <h4 name={'date'}> {weekday[moment(this.props.gig.datetime).format('E')]} {moment(this.props.gig.datetime).format('MMMM DD YYYY')}</h4>\n              <h4 name={'time'} >{moment(this.props.gig.datetime).format('h:mm a')}</h4>\n              <h4 name={'location'} >{this.props.gig.location}</h4>\n              <h4>Notes:</h4><p name={'notes'} >{this.props.gig.notes}</p>\n          </div>\n          <Grid.Column className={\"post-col\"} textAlign='center'>\n             <GigPostList currentUser={this.props.currentUser} gig={this.props.gig} />\n          </Grid.Column>\n            <div className={\"fixedright\"}>\n            <GigPlayerList currentUser={this.props.currentUser} gig={this.props.gig} />\n            </div>\n        </Grid>}\n        </React.Fragment>\n      )\n  }\n}\n\n\n  const mapStateToProps = (state, propsFromParent) => {\n    // let player = state.users.find(user => user.id === propsFromParent.currentUser.id)\n    let gig = state.events.find(gig => gig.id === parseInt(propsFromParent.gigId))\n    let event =  state.events.find( event => event.id === gig.id)\n    /// this array is a player's gigs console.log(player.events)\n    return {\n      loading: state.loading,\n      events: state.events,\n      posts: state.posts,\n      users: state.users,\n      gig: gig,\n      event: event\n    };\n   };\n\n   export default connect(\n     mapStateToProps,\n     { fetchEvents, fetchPosts }\n   )(withRouter(GigDetail));\n\n\n   ///need to make a different/parallel component to PostList called GigPostList so that gig details are rendered for players\n"]},"metadata":{},"sourceType":"module"}