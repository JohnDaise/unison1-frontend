{"ast":null,"code":"import _classCallCheck from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/src/components/UserCard.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Grid, Card, Button, Image, Icon } from 'semantic-ui-react'; // import { fetchEvents } from \"../redux/actions/index\";\n\nvar UserCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserCard, _React$Component);\n\n  function UserCard() {\n    _classCallCheck(this, UserCard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(UserCard).apply(this, arguments));\n  }\n\n  _createClass(UserCard, [{\n    key: \"render\",\n    // addPlayerToEvent = () => {\n    // //adjust logic and find a way to empty dropValue componentDidMount\n    //   if (this.props.dropValue.value && this.props.event){\n    //     let eventId = this.props.event.id\n    //     let playerId = this.props.user.id\n    //   if (this.props.event.users.map(user => user.id).includes(playerId)){\n    //     window.alert(\"Player already added\")\n    //   } else {\n    //   fetch(`http://localhost:3001/user_events/`, {\n    //   method: \"POST\",\n    //   headers: {\n    //     Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n    //     'Content-Type': 'application/json',\n    //     Accept: \"application/json\"\n    //   },\n    //   body: JSON.stringify({\n    //         user_id: playerId,\n    //         event_id: eventId\n    //       })\n    //   })\n    //     .then(r => r.json())\n    //       .then(json => console.log(json))\n    //   // this.props.fetchEvents();\n    //   this.props.openPlayerAddedModal()\n    //   }\n    // } else {\n    //  this.props.openWarningModal()\n    // }}\n    value: function render() {\n      var _this = this;\n\n      console.log(this.props);\n      var eventId = event.id;\n      var playerId = this.props.user.id;\n      var payload = {\n        eventId: eventId,\n        playerId: playerId // console.log(event === undefined)\n\n      };\n      return React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Card.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Image, {\n        src: this.props.user.pic_url,\n        circular: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(Card.Header, {\n        as: \"h3\",\n        id: this.props.user.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, this.props.user.name), React.createElement(Icon, {\n        name: \"envelope\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), \" \", this.props.user.email, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(Icon, {\n        name: \"phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), \" \", this.props.user.phone_number, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(Icon, {\n        name: \"file alternate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), \" \", this.props.user.bio), this.props.event === undefined ? null : // this.props.event.users.map( player => player.id).includes(this.props.user.id)\n      this.props.user.events.map(function (event) {\n        return event.id;\n      }).includes(this.props.event.id) ? null : React.createElement(Button, {\n        onClick: function onClick() {\n          return _this.props.addPlayerToEvent();\n        } //add a function here that will listen for change in the event and re render\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Add Player\")));\n    }\n  }]);\n\n  return UserCard;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var event = state.events.find(function (event) {\n    return event.name === state.dropValue.value;\n  });\n  return {\n    loading: state.loading,\n    events: state.events,\n    event: event,\n    users: state.users,\n    userEvents: state.userEvents,\n    dropValue: state.dropValue\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addPlayerToEvent: function (_addPlayerToEvent) {\n      function addPlayerToEvent(_x) {\n        return _addPlayerToEvent.apply(this, arguments);\n      }\n\n      addPlayerToEvent.toString = function () {\n        return _addPlayerToEvent.toString();\n      };\n\n      return addPlayerToEvent;\n    }(function (value) {\n      return dispatch(addPlayerToEvent(value));\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserCard);","map":{"version":3,"sources":["/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/src/components/UserCard.js"],"names":["React","connect","Grid","Card","Button","Image","Icon","UserCard","console","log","props","eventId","event","id","playerId","user","payload","pic_url","name","email","phone_number","bio","undefined","events","map","includes","addPlayerToEvent","Component","mapStateToProps","state","find","dropValue","value","loading","users","userEvents","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport { Grid, Card, Button, Image, Icon } from 'semantic-ui-react';\n// import { fetchEvents } from \"../redux/actions/index\";\n\n\n\n\n\nclass UserCard extends React.Component {\n\n\n\n// addPlayerToEvent = () => {\n// //adjust logic and find a way to empty dropValue componentDidMount\n//   if (this.props.dropValue.value && this.props.event){\n//     let eventId = this.props.event.id\n//     let playerId = this.props.user.id\n//   if (this.props.event.users.map(user => user.id).includes(playerId)){\n//     window.alert(\"Player already added\")\n//   } else {\n//   fetch(`http://localhost:3001/user_events/`, {\n//   method: \"POST\",\n//   headers: {\n//     Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n//     'Content-Type': 'application/json',\n//     Accept: \"application/json\"\n//   },\n//   body: JSON.stringify({\n//         user_id: playerId,\n//         event_id: eventId\n//       })\n//   })\n//     .then(r => r.json())\n//       .then(json => console.log(json))\n//   // this.props.fetchEvents();\n//   this.props.openPlayerAddedModal()\n//   }\n// } else {\n//  this.props.openWarningModal()\n// }}\n\n\nrender(){\n  console.log(this.props)\n  let eventId = event.id\n  let playerId = this.props.user.id\n  let payload = {\n    eventId: eventId,\n    playerId: playerId\n  }\n  // console.log(event === undefined)\n  return(\n    <Grid.Column>\n    <Card>\n      <Card.Content>\n        <Image src={this.props.user.pic_url} circular size=\"small\"/>\n          <br/>\n          <br/>\n        <Card.Header as='h3' id={this.props.user.id}  >{this.props.user.name}</Card.Header>\n        <Icon name=\"envelope\"/> {this.props.user.email}<br/>\n        <Icon name=\"phone\"/> {this.props.user.phone_number}<br/>\n        <Icon name=\"file alternate\"/> {this.props.user.bio}\n      </Card.Content>\n      {this.props.event === undefined ? null :\n        // this.props.event.users.map( player => player.id).includes(this.props.user.id)\n            this.props.user.events.map( event => event.id ).includes(this.props.event.id) ? null :\n          <Button\n            onClick={()=> this.props.addPlayerToEvent()\n              //add a function here that will listen for change in the event and re render\n            }>Add Player</Button>\n          }\n    </Card>\n    </Grid.Column>\n  )\n  }\n}\n\nconst mapStateToProps = state => {\n  let event = state.events.find( event => event.name === state.dropValue.value)\n  return {\n    loading: state.loading,\n    events: state.events,\n    event: event,\n    users: state.users,\n    userEvents: state.userEvents,\n    dropValue: state.dropValue\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addPlayerToEvent: value => dispatch(addPlayerToEvent(value)),\n  };\n};\n\n\n\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(UserCard);\n"]},"metadata":{},"sourceType":"module"}