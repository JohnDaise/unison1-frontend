{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/src/components/Post.js\";\n\nimport React from \"react\";\nimport { Grid } from 'semantic-ui-react';\nimport { connect } from \"react-redux\";\nimport Iframe from 'react-iframe';\n\nvar Post = function Post(props) {\n  //make a case switch for if URL is a youtube vid, pdf or music file\n  return console.log(props.post), React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, _this.renderIframe);\n}; // const mapStateToProps = (state, propsFromParent) => {\n//   // let post = state.posts.find(post => post.id === props.singleEvent.id)\n//   return {\n//     loading: state.loading,\n//     events: state.events,\n//     posts: state.posts,\n//   };\n//  };\n//\n//  export default connect(mapStateToProps)(Post);\n\n\nexport default Post; // let event = state.events.find(event => event.id === parseInt(propsFromParent.eventId))\n// <iframe width=\"380\"\n// height=\"200\"\n// src={props.post.url}\n// frameborder=\"0\"\n// allow=\"autoplay; encrypted-media\"\n// allowfullscreen></iframe>\n//\n//\n// {props.post.url !== \"\" ?\n//   <div>\n//   Notes: <p>{props.post.content}</p>\n//   <iframe width=\"380\"\n//   height=\"200\"\n//   src={props.post.url}\n//   frameborder=\"0\"\n//   allow=\"autoplay; encrypted-media\"\n//   allowfullscreen></iframe>\n//   </div> :\n//\n//   <div>\n//     <p>{props.post.content}</p>\n//   </div>\n// }\n//\n// <iframe width=\"380\"\n// height=\"157\"\n// src=\"https://www.youtube.com/embed/Rp8WL621uGM\"\n// frameborder=\"0\"\n// allow=\"autoplay; encrypted-media\"\n// allowfullscreen></iframe>\n// <h1>\"post.content\"</h1>","map":{"version":3,"sources":["/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/src/components/Post.js"],"names":["React","Grid","connect","Iframe","Post","props","console","log","post","renderIframe"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,MAAP,MAAmB,cAAnB;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AAGxB;AAIE,SACEC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,IAAlB,GACA,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,KAAI,CAACC,YADV,CAFF;AAQD,CAfD,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,eAAeL,IAAf,C,CAGD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AAWF;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport { Grid } from 'semantic-ui-react';\nimport { connect } from \"react-redux\";\n\nimport Iframe from 'react-iframe';\n\n\n\nconst Post = (props) => {\n\n\n//make a case switch for if URL is a youtube vid, pdf or music file\n\n\n\n  return(\n    console.log(props.post),\n    <React.Fragment>\n        {this.renderIframe}\n     </React.Fragment>\n  )\n\n\n}\n\n// const mapStateToProps = (state, propsFromParent) => {\n//   // let post = state.posts.find(post => post.id === props.singleEvent.id)\n//   return {\n//     loading: state.loading,\n//     events: state.events,\n//     posts: state.posts,\n//   };\n//  };\n//\n//  export default connect(mapStateToProps)(Post);\n export default Post;\n\n\n// let event = state.events.find(event => event.id === parseInt(propsFromParent.eventId))\n\n\n\n// <iframe width=\"380\"\n// height=\"200\"\n// src={props.post.url}\n// frameborder=\"0\"\n// allow=\"autoplay; encrypted-media\"\n// allowfullscreen></iframe>\n//\n//\n\n\n\n\n\n\n    // {props.post.url !== \"\" ?\n    //   <div>\n    //   Notes: <p>{props.post.content}</p>\n    //   <iframe width=\"380\"\n    //   height=\"200\"\n    //   src={props.post.url}\n    //   frameborder=\"0\"\n    //   allow=\"autoplay; encrypted-media\"\n    //   allowfullscreen></iframe>\n    //   </div> :\n    //\n    //   <div>\n    //     <p>{props.post.content}</p>\n    //   </div>\n  // }\n\n\n\n\n\n\n\n\n\n\n//\n// <iframe width=\"380\"\n// height=\"157\"\n// src=\"https://www.youtube.com/embed/Rp8WL621uGM\"\n// frameborder=\"0\"\n// allow=\"autoplay; encrypted-media\"\n// allowfullscreen></iframe>\n// <h1>\"post.content\"</h1>\n"]},"metadata":{},"sourceType":"module"}