{"ast":null,"code":"var _jsxFileName = \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/src/components/GigPostList.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, List } from 'semantic-ui-react';\nimport Post from './Post';\n\nvar GigPostList = function GigPostList(props) {\n  //new post form creates an iframe element if it includes a url otherwise would just show post content\n  //-sets the src string and would need an id\n  // let post = {url: \"https://www.youtube.com/embed/Rp8WL621uGM\", content: \"Lets do this verison :)\"}\n  return console.log(props), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, props.gigPosts ? props.gigPosts.reverse().map(function (post) {\n    return React.createElement(List.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(Post, {\n      post: post,\n      currentUser: props.currentUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }));\n  }) : null));\n}; ///get list of posts from mapStateToProps\n\n\nvar mapStateToProps = function mapStateToProps(state, propsFromParent) {\n  console.log(propsFromParent);\n  var gigPosts = propsFromParent.gig.posts.filter(function (post) {\n    return post.event_id === propsFromParent.gig.id;\n  });\n  return {\n    loading: state.loading,\n    events: state.events,\n    posts: state.posts,\n    gigPosts: gigPosts\n  };\n};\n\nexport default connect(mapStateToProps)(GigPostList); //\n// {props ?\n//   props.map( post =>\n//   <List.Item><Post post={post} currentUser={props.currentUser}/></List.Item>\n// ): null}\n// {props.currentUser.posts.map(post => {\n//     <Post post={post}/>\n//     }\n// )}","map":{"version":3,"sources":["/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/src/components/GigPostList.js"],"names":["React","connect","Grid","List","Post","GigPostList","props","console","log","gigPosts","reverse","map","post","currentUser","mapStateToProps","state","propsFromParent","gig","posts","filter","event_id","id","loading","events"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAG/B;AACA;AAEA;AAEE,SACEC,OAAO,CAACC,GAAR,CAAYF,KAAZ,GACA,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACG,QAAN,GACCH,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyBC,GAAzB,CAA8B,UAAAC,IAAI;AAAA,WAChC,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAW,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,IAAZ;AAAkB,MAAA,WAAW,EAAEN,KAAK,CAACO,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADgC;AAAA,GAAlC,CADD,GAGK,IAJR,CADF,CAFF;AAaD,CArBD,C,CAsBA;;;AAGA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,eAAR,EAA4B;AAClDT,EAAAA,OAAO,CAACC,GAAR,CAAYQ,eAAZ;AACA,MAAIP,QAAQ,GAAGO,eAAe,CAACC,GAAhB,CAAoBC,KAApB,CAA0BC,MAA1B,CAAiC,UAAAP,IAAI;AAAA,WAAIA,IAAI,CAACQ,QAAL,KAAkBJ,eAAe,CAACC,GAAhB,CAAoBI,EAA1C;AAAA,GAArC,CAAf;AACA,SAAO;AACLC,IAAAA,OAAO,EAAEP,KAAK,CAACO,OADV;AAELC,IAAAA,MAAM,EAAER,KAAK,CAACQ,MAFT;AAGLL,IAAAA,KAAK,EAAEH,KAAK,CAACG,KAHR;AAILT,IAAAA,QAAQ,EAAEA;AAJL,GAAP;AAMD,CATD;;AAYA,eAAeR,OAAO,CAACa,eAAD,CAAP,CAAyBT,WAAzB,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Grid, List } from 'semantic-ui-react';\nimport Post from './Post';\n\n\nconst GigPostList = (props) => {\n\n\n//new post form creates an iframe element if it includes a url otherwise would just show post content\n//-sets the src string and would need an id\n\n// let post = {url: \"https://www.youtube.com/embed/Rp8WL621uGM\", content: \"Lets do this verison :)\"}\n\n  return(\n    console.log(props),\n    <Grid.Column>\n      <List>\n        {props.gigPosts ?\n          props.gigPosts.reverse().map( post =>\n            <List.Item><Post post={post} currentUser={props.currentUser}/></List.Item>\n          ) : null\n        }\n      </List>\n    </Grid.Column>\n\n  )\n}\n///get list of posts from mapStateToProps\n\n\nconst mapStateToProps = (state, propsFromParent) => {\n  console.log(propsFromParent)\n  let gigPosts = propsFromParent.gig.posts.filter(post => post.event_id === propsFromParent.gig.id)\n  return {\n    loading: state.loading,\n    events: state.events,\n    posts: state.posts,\n    gigPosts: gigPosts\n  };\n};\n\n\nexport default connect(mapStateToProps)(GigPostList);\n\n//\n// {props ?\n//   props.map( post =>\n//   <List.Item><Post post={post} currentUser={props.currentUser}/></List.Item>\n// ): null}\n\n// {props.currentUser.posts.map(post => {\n//     <Post post={post}/>\n//     }\n// )}\n"]},"metadata":{},"sourceType":"module"}