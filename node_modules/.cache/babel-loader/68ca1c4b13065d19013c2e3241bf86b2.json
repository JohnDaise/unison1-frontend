{"ast":null,"code":"import _toConsumableArray from \"/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { combineReducers } from \"redux\"; // import userData from \"../users.json\";\n// const initialState = {\n//   users: [],\n//   events: [],\n//   userEvents: [],\n//   posts: [],\n//   searchTerm: \"\",\n//   dropValue: null\n// };\n\nvar searchTextReducer = function searchTextReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"CHANGE_SEARCH_TEXT\":\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nvar dropDownReducer = function dropDownReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"CHANGE_DROP_VALUE\":\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nvar usersReducer = function usersReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"FETCHED_USERS\":\n      return action.users;\n\n    default:\n      return state;\n  }\n};\n\nvar loadingReducer = function loadingReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"FETCHING_USERS\":\n      return true;\n\n    case \"FETCHING_EVENTS\":\n      return true;\n\n    case \"FETCHED_USERS\":\n      return false;\n\n    case \"FETCHED_EVENTS\":\n      return false;\n\n    default:\n      return state;\n  }\n}; //to create  add dispatch in action mapDispatchToProps\n\n\nvar eventsReducer = function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"EVENT_DELETED\":\n      return state.filter(function (event) {\n        return event.id !== action.event.id;\n      });\n\n    case \"EVENT_UPDATED\":\n      return state.map(function (event) {\n        if (event.id === action.event.id) {\n          return action.event;\n        } else {\n          return event;\n        }\n      });\n\n    case \"ADD_EVENT\":\n      return newEvents = _toConsumableArray(state).concat([action.event]);\n\n    case \"FETCHED_EVENTS\":\n      return action.events;\n\n    default:\n      return state;\n  }\n};\n\nvar userEventsReducer = function userEventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newUserEvents = [];\n\n  switch (action.type) {\n    case \"ADD_USER_EVENT\":\n      return newUserEvents = _toConsumableArray(state).concat([action.ue]);\n\n    case \"FETCHED_USER_EVENTS\":\n      return action.ues;\n\n    default:\n      return state;\n  }\n};\n\nvar postsReducer = function postsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"POST_DELETED\":\n      return state.filter(function (post) {\n        return post.id !== action.post.id;\n      });\n\n    case \"ADD_POST\":\n      return newPosts = _toConsumableArray(state).concat([action.post]);\n\n    case \"FETCHED_POSTS\":\n      return action.posts;\n\n    default:\n      return state;\n  }\n}; ///do this reducer\n//to login a user dispatch here mapDispatchToProps\n// hold current user info  mapStateToProps\n//boolean if user is logged in mapStateToProps\n\n\nvar loginReducer = function loginReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SET_USER:\":\n      return action.currentUser;\n\n    case \"FORGET_USER\":\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nvar rootReducer = combineReducers({\n  searchTerm: searchTextReducer,\n  dropValue: dropDownReducer,\n  users: usersReducer,\n  currentUser: loginReducer,\n  events: eventsReducer,\n  userEvents: userEventsReducer,\n  loading: loadingReducer,\n  posts: postsReducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/JohnDaise/Desktop/Flatiron/mod4/unison1-frontend/src/redux/reducer.js"],"names":["combineReducers","searchTextReducer","state","action","type","value","dropDownReducer","usersReducer","users","loadingReducer","eventsReducer","filter","event","id","map","newEvents","events","userEventsReducer","newUserEvents","ue","ues","postsReducer","post","newPosts","posts","loginReducer","currentUser","rootReducer","searchTerm","dropValue","userEvents","loading"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\n// import userData from \"../users.json\";\n\n// const initialState = {\n//   users: [],\n//   events: [],\n//   userEvents: [],\n//   posts: [],\n//   searchTerm: \"\",\n//   dropValue: null\n// };\n\n\nconst searchTextReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case \"CHANGE_SEARCH_TEXT\":\n      return action.value;\n    default:\n      return state;\n  }\n};\n\nconst dropDownReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case \"CHANGE_DROP_VALUE\":\n      return action.value;\n    default:\n      return state;\n  }\n};\n\nconst usersReducer = (state = [], action) => {\n  switch(action.type){\n    case \"FETCHED_USERS\":\n        return action.users;\n    default:\n      return state;\n  }\n}\n\n\nconst loadingReducer = (state = false, action) => {\n  switch (action.type) {\n    case \"FETCHING_USERS\":\n      return true;\n    case \"FETCHING_EVENTS\":\n      return true;\n      case \"FETCHED_USERS\":\n      return false;\n    case \"FETCHED_EVENTS\":\n      return false;\n    default:\n      return state;\n  }\n};\n\n//to create  add dispatch in action mapDispatchToProps\nconst eventsReducer = (state = [], action) => {\n  switch(action.type){\n    case \"EVENT_DELETED\":\n      return state.filter( event => event.id !== action.event.id)\n    case \"EVENT_UPDATED\":\n      return state.map(event => {\n        if (event.id === action.event.id) {\n          return action.event;\n        } else {\n          return event;\n        }\n      });\n\n    case \"ADD_EVENT\":\n      return newEvents = [...state, action.event]\n    case \"FETCHED_EVENTS\":\n        return action.events;\n    default:\n      return state;\n  }\n}\n\n\nconst userEventsReducer = (state = [], action) => {\n  let newUserEvents = []\n  switch(action.type){\n    case \"ADD_USER_EVENT\":\n      return newUserEvents = [...state, action.ue]\n    case \"FETCHED_USER_EVENTS\":\n        return action.ues;\n    default:\n      return state;\n  }\n}\n\n\nconst postsReducer = (state = [], action) => {\n  switch(action.type){\n    case \"POST_DELETED\":\n      return state.filter( post => post.id !== action.post.id)\n    case \"ADD_POST\":\n      return newPosts = [...state, action.post];\n    case \"FETCHED_POSTS\":\n        return action.posts;\n    default:\n      return state;\n  }\n}\n\n\n\n///do this reducer\n//to login a user dispatch here mapDispatchToProps\n// hold current user info  mapStateToProps\n//boolean if user is logged in mapStateToProps\nconst loginReducer = (state = null, action) => {\n  switch(action.type){\n    case \"SET_USER:\":\n      return action.currentUser\n    case \"FORGET_USER\":\n        return null;\n    default:\n      return state;\n    }\n}\n\n\n\n\nconst rootReducer = combineReducers({\n  searchTerm: searchTextReducer,\n  dropValue: dropDownReducer,\n  users: usersReducer,\n  currentUser: loginReducer,\n  events: eventsReducer,\n  userEvents: userEventsReducer,\n  loading: loadingReducer,\n  posts: postsReducer\n});\n\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}